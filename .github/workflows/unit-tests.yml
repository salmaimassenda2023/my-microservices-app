name: Run Unit Tests

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: Test ${{ matrix.service }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - customer
          - product-service
          - order-service
          - payement
          - notification-server
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: üß™ Run Tests
        working-directory: services/${{ matrix.service }}
        run: mvn clean test

      - name: üìä Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          jacoco-csv-file: services/${{ matrix.service }}/target/site/jacoco/jacoco.csv
          badges-directory: .github/badges/${{ matrix.service }}
          generate-branches-badge: true
          generate-summary: true

      - name: üì§ Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: services/${{ matrix.service }}/target/surefire-reports/
          retention-days: 30

      - name: üì§ Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report-${{ matrix.service }}
          path: services/${{ matrix.service }}/target/site/jacoco/
          retention-days: 30

  aggregate:
    name: Aggregate Reports & Publish
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üì• Download All Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test-results/

      - name: üì• Download All Coverage Reports
        uses: actions/download-artifact@v4
        with:
          pattern: jacoco-report-*
          path: jacoco-reports/

      - name: üìä Generate Summary JSON
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const services = [
            'customer',
            'product-service', 
            'order-service',
            'payement',
            'notification-server'
          ];
          
          const results = {
            timestamp: new Date().toISOString(),
            services: [],
            global: {
              totalTests: 0,
              passed: 0,
              failed: 0,
              skipped: 0,
              successRate: 0,
              averageCoverage: 0
            }
          };
          
          services.forEach(service => {
            const jacocoDir = `jacoco-reports/jacoco-report-${service}`;
            const csvPath = path.join(jacocoDir, 'jacoco.csv');
            
            let coverage = 0;
            if (fs.existsSync(csvPath)) {
              const csv = fs.readFileSync(csvPath, 'utf8');
              const lines = csv.split('\n');
              if (lines.length > 1) {
                const totals = lines[1].split(',');
                const missed = parseInt(totals[5] || 0);
                const covered = parseInt(totals[6] || 0);
                coverage = covered / (missed + covered) * 100;
              }
            }
            
            results.services.push({
              name: service,
              coverage: parseFloat(coverage.toFixed(2))
            });
            
            results.global.averageCoverage += coverage;
          });
          
          results.global.averageCoverage = parseFloat(
            (results.global.averageCoverage / services.length).toFixed(2)
          );
          
          fs.mkdirSync('public', { recursive: true });
          fs.writeFileSync('public/test-summary.json', JSON.stringify(results, null, 2));
          console.log('‚úÖ Summary generated');
          EOF

      - name: üìÅ Organize Reports for GitHub Pages
        run: |
          mkdir -p public
          
          # Copy all JaCoCo reports
          for service in customer product-service order-service payement notification-server; do
            if [ -d "jacoco-reports/jacoco-report-$service" ]; then
              mkdir -p "public/$service"
              cp -r jacoco-reports/jacoco-report-$service/* "public/$service/"
            fi
          done
          
          # Create index.html
          cat > public/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>E-Commerce Microservices - Test Reports</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      padding: 40px 20px;
                  }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .header {
                      background: white;
                      padding: 40px;
                      border-radius: 20px;
                      margin-bottom: 30px;
                      box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                      text-align: center;
                  }
                  h1 { color: #333; font-size: 36px; margin-bottom: 10px; }
                  .subtitle { color: #666; font-size: 18px; }
                  .summary {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .stat-card {
                      background: white;
                      padding: 25px;
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                      text-align: center;
                  }
                  .stat-card .icon { font-size: 40px; margin-bottom: 10px; }
                  .stat-card .value { font-size: 32px; font-weight: bold; color: #333; }
                  .stat-card .label { color: #666; margin-top: 5px; }
                  .services {
                      display: grid;
                      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                      gap: 20px;
                  }
                  .service-card {
                      background: white;
                      padding: 30px;
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                      transition: transform 0.3s;
                  }
                  .service-card:hover { transform: translateY(-5px); }
                  .service-card h2 { color: #667eea; margin-bottom: 15px; }
                  .service-card .coverage {
                      font-size: 48px;
                      font-weight: bold;
                      color: #333;
                      margin: 20px 0;
                  }
                  .service-card a {
                      display: inline-block;
                      padding: 12px 30px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      color: white;
                      text-decoration: none;
                      border-radius: 8px;
                      font-weight: 600;
                      transition: transform 0.2s;
                  }
                  .service-card a:hover { transform: scale(1.05); }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>üß™ E-Commerce Microservices</h1>
                      <p class="subtitle">Unit Tests & Coverage Reports</p>
                  </div>
                  
                  <div class="summary" id="summary">
                      <div class="stat-card">
                          <div class="icon">üìä</div>
                          <div class="value" id="avgCoverage">--</div>
                          <div class="label">Average Coverage</div>
                      </div>
                      <div class="stat-card">
                          <div class="icon">üì¶</div>
                          <div class="value">5</div>
                          <div class="label">Microservices</div>
                      </div>
                      <div class="stat-card">
                          <div class="icon">‚è±Ô∏è</div>
                          <div class="value" id="lastUpdate">--</div>
                          <div class="label">Last Updated</div>
                      </div>
                  </div>
                  
                  <div class="services" id="services"></div>
              </div>
              
              <script>
                  fetch('test-summary.json')
                      .then(r => r.json())
                      .then(data => {
                          document.getElementById('avgCoverage').textContent = 
                              data.global.averageCoverage.toFixed(1) + '%';
                          
                          const date = new Date(data.timestamp);
                          document.getElementById('lastUpdate').textContent = 
                              date.toLocaleDateString();
                          
                          const servicesDiv = document.getElementById('services');
                          const icons = {
                              'customer': 'üë§',
                              'product-service': 'üõçÔ∏è',
                              'order-service': 'üì¶',
                              'payement': 'üí≥',
                              'notification-server': 'üìß'
                          };
                          
                          data.services.forEach(service => {
                              const card = document.createElement('div');
                              card.className = 'service-card';
                              card.innerHTML = `
                                  <h2>${icons[service.name] || 'üì¶'} ${service.name}</h2>
                                  <div class="coverage">${service.coverage.toFixed(1)}%</div>
                                  <a href="${service.name}/index.html">View Coverage Report ‚Üí</a>
                              `;
                              servicesDiv.appendChild(card);
                          });
                      })
                      .catch(err => console.error('Error loading summary:', err));
              </script>
          </body>
          </html>
          HTMLEOF

      - name: üìÑ Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: üì§ Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public/

      - name: üöÄ Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: üìù Comment PR with Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = JSON.parse(fs.readFileSync('public/test-summary.json', 'utf8'));
            
            const comment = `## üß™ Test Results
            
            | Metric | Value |
            |--------|-------|
            | Average Coverage | ${summary.global.averageCoverage.toFixed(1)}% |
            | Services Tested | ${summary.services.length} |
            
            ### Coverage by Service
            ${summary.services.map(s => 
              `- ${s.name}: ${s.coverage.toFixed(1)}%`
            ).join('\n')}
            
            [View Full Reports](https://${context.repo.owner}.github.io/${context.repo.repo}/)
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
